lockify.sjclBridge.encrypt={encrypts:function(plaintextString,keyString,key){function utf8ToByteArray(str){return sjcl.codec.bytes.fromBits(sjcl.codec.utf8String.toBits(str));}
var iv;try{iv=lockifyCryptoUtils.getRandomWords(4);}catch(err){alert('Could not generate random numbers. '+err);return null;}
var output=sjclE.cbc.StringOutput(),encryptor=sjclE.cbc.OpenSSLByteStreamEncryptor(key,iv,sjclE.cbc.Base64WithBreaksWordEncoder(output)),plaintextByteCodes=utf8ToByteArray(plaintextString);encryptor.writeData(plaintextByteCodes);encryptor.close();return output.getResult();},encryptData:function(data,encryption_type,callback){function utf8ToByteArray(str){return sjcl.codec.bytes.fromBits(sjcl.codec.utf8String.toBits(str));}
var key,iv,keyString,hmacString;if(encryption_type=="encryptMessage"){try{key=lockifyCryptoUtils.getRandomWords(data.get('bitStrength')/32);iv=lockifyCryptoUtils.getRandomWords(4);keyString=sjcl.codec.base64.fromBits(key).replace(/\=+$/,'');}catch(err){alert('Could not generate random numbers. '+err);return false;}}else{iv=lockify.index.entry.get('cryptoAssets').iv;key=lockify.index.entry.get('cryptoAssets').key;keyString=lockify.index.entry.get('cryptoAssets').keyString;hmacString=lockify.index.entry.get('cryptoAssets').hmacString;}
var output=sjclE.cbc.StringOutput();var encryptor=sjclE.cbc.OpenSSLByteStreamEncryptor(key,iv,sjclE.cbc.Base64WithBreaksWordEncoder(output));var plaintextByteCodes=utf8ToByteArray(data.get('plaintext'));lockify.sjclBridge.throwEvent('enc-start');if(data.get('files')&&data.get('files').length){encryptor.writeData([0]);}
var nextBlock=function(){var itemIndex=0,offset=0,BLOCK_SIZE=4096,blocked=false;return function(){if(window.console){window.console.log('Encrypting segment',itemIndex,offset);}
if(blocked){if(window.console){window.console.log('Spinning waiting for previous file read/encrypt to complete.');}
return true;}
var item,itemSize;if(itemIndex===0){itemSize=plaintextByteCodes.length;encryptor.writeData(plaintextByteCodes.slice(offset,offset+BLOCK_SIZE));offset+=BLOCK_SIZE;if(offset>=itemSize&&data.get('files')&&data.get('files').length){encryptor.writeData([0]);}}else{item=data.get('files')[itemIndex-1];if(item.asyncReader){if(offset<item.size){blocked=true;item.asyncReader(function(data){offset+=data.length;encryptor.writeData(data);blocked=false;});}}else{encryptor.writeData(item.reader(BLOCK_SIZE));offset+=BLOCK_SIZE;}
itemSize=item.size;}
if(!blocked&&offset>=itemSize){itemIndex++;if(data.get('files')&&itemIndex<=data.get('files').length){item=data.get('files')[itemIndex-1];encryptor.writeData(utf8ToByteArray(item.filename));encryptor.writeData([0].concat(utf8ToByteArray(''+item.size),[0]));offset=0;return true;}
return false;}
return true;};}();function nextBlockWithTimeout(){if(encryption_type=='encryptMessage'){if(nextBlock()){window.setTimeout(nextBlockWithTimeout,1);var progPercent=Math.min(1.0,output.getResult().length/data.finalTotalDataLength);lockify.sjclBridge.throwEvent('enc-progress',progPercent);if(window.console){window.console.log("Encryption % complete:"+progPercent);}}else{endEncryption();}}
else{endAuthEncryption();}}
window.setTimeout(nextBlockWithTimeout,1);function endEncryption(){encryptor.close();var ciphertext=output.getResult();var salt=lockifyCryptoUtils.generateRandomString(32);var adminCredPlain=lockifyCryptoUtils.generateRandomString(8);var adminCredHash=lockifyCryptoUtils.hash_sha256_b64u(salt+adminCredPlain);var authInfoKeyString=keyString;var hmacString;if(typeof hmacString==='undefined'){var offset=0;var size=lockifyGlobals.HMAC_BLOCK_CHAR_COUNT;var hmac=new sjcl.misc.hmac(key);if(ciphertext.length<=size){hmacString=sjcl.codec.base64.fromBits(hmac.encrypt(ciphertext));}else{while(offset<=ciphertext.length){hmac.update(ciphertext.slice(offset,offset+size));offset=offset+size;}
hmacString=sjcl.codec.base64.fromBits(hmac.digest());}}
callback({"salt":salt,"iv":iv,"key":key,"adminCredHash":adminCredHash,"passwordHash":'',"secAnsAcceptClose":'',"secAnHashes":'',"useridHashes":'',"useridsAES256":'',"keyString":keyString,"ciphertext":ciphertext+'\n'+hmacString});lockify.sjclBridge.throwEvent('enc-end');}
function endAuthEncryption(){encryptor.close();ciphertext=lockify.index.entry.get('cryptoAssets').ciphertext;lockify.sjclBridge.throwEvent('enc-auth');var salt=lockify.index.entry.get('cryptoAssets').salt;var adminCredPlain=lockify.index.entry.get('cryptoAssets').adminCredPlain;var adminCredHash=lockify.index.entry.get('cryptoAssets').adminCredHash;var passwordHash='';var secAns=[];var secAnHashes=[];var secAnsAcceptClose=[];var useridHashes='',useridsAES256='';var authInfoKeyString=keyString;switch(data.get('authMethod')){case'password':passwordHash=lockifyCryptoUtils.hash_sha256_b64u(salt+data.get('password'));break;case'question':secAns=data.get('securityAnswer').toLowerCase().split(',');$.each(secAns,function(i,val){val=$.trim(val);if(!val.length){return;}
if(data.get('acceptCloseAnswers')&&val.replace(CLOSE_ANSWER_REGEX,'').length>=lockifyIndexGlobals.minCharsEnableClose){val=val.replace(CLOSE_ANSWER_REGEX,'');secAnsAcceptClose[i]=true;}else{secAnsAcceptClose[i]=false;}
val=lockifyCryptoUtils.hash_sha256_b64u(salt+val);secAnHashes.push(val);});break;case'native':case'thirdParty':case'phone':case'email':case'intEmail':useridHashes=$.map(data.get('userids'),function(userid){var caseNormalUserIds=(data.get('authMethod')==="native")?userid.toUpperCase():userid.toLowerCase();return lockifyCryptoUtils.hash_sha256_b64u(salt+caseNormalUserIds);});if(lockifyIndexGlobals.enable2wayUserIdCrypto){useridsAES256=lockify.sjclBridge.encrypt.encrypts(data.maskedUserIds().join(', '),authInfoKeyString,key);}
break;}
callback({"salt":salt,"iv":iv,"key":key,"adminCredHash":adminCredHash,"passwordHash":passwordHash,"secAnsAcceptClose":secAnsAcceptClose,"secAnHashes":secAnHashes,"useridHashes":useridHashes,"useridsAES256":useridsAES256,"keyString":keyString,"ciphertext":ciphertext});}}};